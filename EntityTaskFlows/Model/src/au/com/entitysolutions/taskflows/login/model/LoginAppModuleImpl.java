package au.com.entitysolutions.taskflows.login.model;

import au.com.entitysolutions.taskflows.login.model.common.LoginAppModule;
import au.com.entitysolutions.taskflows.login.util.RandomPasswordGen;
import au.com.entitysolutions.taskflows.system.model.PortalCommonAppModuleImpl;

import au.com.entitysolutions.taskflows.model.utils.ModelConstants;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.VariableValueManager;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;

import org.apache.commons.lang.StringUtils;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jul 01 11:29:01 EST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LoginAppModuleImpl extends PortalCommonAppModuleImpl implements LoginAppModule, ModelConstants {
    
    private static final String SOURCE_CLASS = PortalCommonAppModuleImpl.class.getCanonicalName();
    private static final Logger LOGGER = Logger.getLogger(SOURCE_CLASS);        
    private boolean isTestMode = false;
    /**
     * This is the default constructor (do not remove).
     */
    public LoginAppModuleImpl() {
    }
    
    
    
    /**
     * Reset password method. Invoked from Forgotten Password screen
     * @param emailAddress
     * @return true - if the process succeeds, false if the process fails or the 
     * email address is not found
     */    
    public Boolean resetPassword(String emailAddress) {
        return this.resetPassword(emailAddress, null);
    }
    
    public Boolean resetPassword(String emailAddress, String ipAddress) {                    
        if(isTestMode) { return Boolean.TRUE; }
        LOGGER.entering(SOURCE_CLASS, "resetPassword");
        Boolean result = Boolean.FALSE;
        ViewObjectImpl sysUsers = this.getSysUsersView1();
        VariableValueManager varManager = sysUsers.ensureVariableManager();
        varManager.setVariableValue("p_email_address", emailAddress);
        
        RandomPasswordGen passGen = new RandomPasswordGen();
        String tempPwd = passGen.getPass();
        sysUsers.executeQuery();
        
        ViewObjectImpl userDetails = this.getUserDetailsView();
        VariableValueManager userDetailsVarManager = userDetails.ensureVariableManager();
        userDetailsVarManager.setVariableValue("p_email_address", emailAddress);
        userDetails.executeQuery();

        Row userRow = sysUsers.first();
        Row userDetailsRow = userDetails.first();
        if (userRow == null) {
            LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "resetPassword",
                        "Email Address not found - " + emailAddress);
            result = Boolean.FALSE;
        }
        else if(userRow != null)
        {
            userRow.setAttribute("Password", tempPwd);
            userRow.setAttribute("ResetPassword","Y"); //Force password reset on next login
            userRow.setAttribute("PropToPortal", "C");
    
            String emailMsg = this.getGlobalVariable(PORTAL_FGT_PWD_EMAIL_TEMPLATE_KEY);
            if (emailMsg != null) {
                emailMsg =
                        emailMsg.replaceAll("\\$TEMPPWD\\$", Matcher.quoteReplacement(tempPwd));
                emailMsg =
                      emailMsg.replaceAll("\\$PREFERNAME\\$", Matcher.quoteReplacement((String)userDetailsRow.getAttribute("PreferredName")));
            
            }
            String supportEmail = this.getGlobalVariable(PORTAL_NOTIFICATION_NOREPLY_SENDER_KEY);
            String emailSubject="Forgotten Password Reset Request";
            
            this.sendEmailWithAttachments(emailAddress,null,null,emailSubject,emailMsg,null);
//            this.sendEmail(supportEmail, emailAddress, ,
//                           emailMsg);
            String userName = (String)userRow.getAttribute("UserName");
            this.auditUserAction("FGT_PASSWORD", userName, ipAddress);
            this.auditUserAction("PASSWORD_EMAILED", userName, ipAddress, emailMsg, emailAddress);
            this.getTransaction().commit();
            result = Boolean.TRUE;
        }
        LOGGER.finest("Result= " + result);
        LOGGER.exiting(SOURCE_CLASS, "resetPassword");
        return result;
    }
    
    /**
     * This method emails the user's ID to the registered email address from
     * SYS_USERS
     * @param emailAddress
     * @return true - if the process succeeds, false if the process fails or the 
     * email address is not found
     */
     public Boolean sendUserId(String emailAddress) {
         return this.sendUserId(emailAddress, null);
     }
    
    public Boolean sendUserId(String emailAddress, String ipAddress) {
        if(isTestMode) { return Boolean.TRUE; }
        LOGGER.entering(SOURCE_CLASS, "sendUserId");
        Boolean result = Boolean.FALSE;
        ViewObjectImpl userDetails = this.getUserDetailsView();
        VariableValueManager varManager = userDetails.ensureVariableManager();
        varManager.setVariableValue("p_email_address", emailAddress);
        userDetails.executeQuery();

        Row userRow = userDetails.first();
        if (userRow == null) {
            LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "sendUserId",
                        "Email Address not found - " + emailAddress);
            result = Boolean.FALSE;
        }
        else if(userRow != null) {
            String userIdMsg = this.getGlobalVariable(PORTAL_FGT_USERID_EMAIL_TEMPLATE_KEY);
            if (userIdMsg != null) {
                userIdMsg =
                        userIdMsg.replaceAll("\\$USERID\\$", Matcher.quoteReplacement((String)userRow.getAttribute("UserName")));
              userIdMsg =
                      userIdMsg.replaceAll("\\$PREFERNAME\\$", Matcher.quoteReplacement((String)userRow.getAttribute("PreferredName")));
            }            
            String supportEmail = this.getGlobalVariable(PORTAL_NOTIFICATION_NOREPLY_SENDER_KEY);
            String emailSubject="Forgotten User ID Request";
            
            this.sendEmailWithAttachments(emailAddress,null,null,emailSubject,userIdMsg,null);
            //this.sendEmail(supportEmail, emailAddress, "User Id Request", userIdMsg);            
            LOGGER.finest("Email sent");
            String userName = (String)userRow.getAttribute("UserName");
            
            this.auditUserAction("FGT_USERID", userName, ipAddress);
            this.auditUserAction("USERID_EMAILED", userName, ipAddress, userIdMsg, emailAddress);
            LOGGER.finest("Action Audited");
            
            this.getTransaction().commit();
            result = Boolean.TRUE;
        }
        LOGGER.finest("Result= " + result);
        LOGGER.exiting(SOURCE_CLASS, "sendUserId");
        return result;
    }
    
    /**
     * Action on user initiated change password
     * @param userName
     * @param oldPassword
     * @param newPassword
     * @return
     */
    public Boolean changePassword(String userName, String ipAddress, String oldPassword, String newPassword) {
        if(isTestMode) { return Boolean.TRUE; }
        LOGGER.entering(SOURCE_CLASS, "changePassword");
        Boolean result = Boolean.FALSE;
        ViewObjectImpl sysUsers = this.getSysUsersView1();
        VariableValueManager varManager = sysUsers.ensureVariableManager();
        varManager.setVariableValue("p_user_name", userName );
        sysUsers.executeQuery();
        Row userRow = sysUsers.first();
        if (userRow == null) {
            LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "changePassword",
                        "User record not found:" + userName);
            result = Boolean.FALSE;
        }
        else if(userRow != null) {        
                userRow.setAttribute("Password",newPassword);
                userRow.setAttribute("PropToPortal","C");
                userRow.setAttribute("ResetPassword", "N");               
                
                this.auditUserAction("USER_CHANGE_PASSWORD", userName, ipAddress);
                this.auditUserAction("USER_UPDATED_SEC_QUESTIONS", userName, ipAddress);
                LOGGER.finest("User Action Audited");
                this.getTransaction().commit();                
                LOGGER.finest("Commit Performed");
                result = Boolean.TRUE;
        }        
        LOGGER.finest("Result= " + result);
        LOGGER.exiting(SOURCE_CLASS, "changePassword");
        return result;
    }
    
    /**
     * Action on user accepting terms and conditions
     * @param userName
     * @param ipAddress
     * @return
     */
    public Boolean acceptTAndC(String userName, String ipAddress) {
        if(isTestMode) { return Boolean.TRUE; }
        LOGGER.entering(SOURCE_CLASS, "acceptTAndC");
        Boolean result = Boolean.FALSE;
        ViewObjectImpl sysUsers = this.getSysUsersView1();
        VariableValueManager varManager = sysUsers.ensureVariableManager();
        varManager.setVariableValue("p_user_name", userName );
        sysUsers.executeQuery();
        Row userRow = sysUsers.first();
        if (userRow == null) {
            LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "acceptTAndC",
                        "User record not found:" + userName);
            result = Boolean.FALSE;
        }
        else if(userRow != null) {        
            userRow.setAttribute("ResetTermCondition", "N");
            this.auditUserAction("ACCEPT_TERMS_AND_CONDITIONS", userName, ipAddress);
            this.getTransaction().commit();
            result = Boolean.TRUE;
        }
        LOGGER.finest("Result= " + result);
        LOGGER.exiting(SOURCE_CLASS, "acceptTAndC");
        return result;
    }  
    
  /**
   * Internal method to check password validation rules
   * @param userName
   * @param oldPassword
   * @param newPassword
   * @return
   */
    public Boolean validatePasswordRules(String userName, String oldPassword, String newPassword){
      Boolean result = Boolean.TRUE;
      newPassword=(StringUtils.isEmpty(newPassword)) ? "" : newPassword;
      
      ViewObjectImpl voUserDetails = this.getUserDetailsView();
      VariableValueManager varManager = voUserDetails.ensureVariableManager();
      varManager.setVariableValue("p_user_name", userName );
      voUserDetails.executeQuery();
      Row userRow = voUserDetails.first();
      
      if(userRow==null){
        LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "validatePasswordRules",
                    "Username not found "+userName);
        return false;
      }
      
      String currentPassword=(String)userRow.getAttribute("Password");
      
      //The current password does not match the supplied password
      if(!currentPassword.equals(oldPassword)){
        LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "validatePasswordRules",
                    "Password supplied does not match");
        result=false;
      }      
      
      if(currentPassword.equals(newPassword)){
        LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "validatePasswordRules",
                    "New password is the same with current password");
        result=false;
      }  
      
      if(userName.equalsIgnoreCase(newPassword)){
        LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "validatePasswordRules",
                    "Password cannot be the same with username");
        result=false;
      }
      
      //Length validation less between 6 and 11 chars
      if(newPassword.length()<6 || newPassword.length()>11){
        LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "validatePasswordRules",
                    "New password length is not between 6 and 11 characters");
        result=false;
      }
      
      if(StringUtils.containsNone(newPassword,"ABCDEFGHIJKLMNOPQRSTUVWXYZ".toCharArray())){
        LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "validatePasswordRules",
                    "Password must contain least one upper case character");
        result=false;
      }
      
      if(StringUtils.containsNone(newPassword,"abcdefghijklmnopqrstuvwxyz".toCharArray())){
        LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "validatePasswordRules",
                    "Password must contain least one lower case character");
        result=false;
      }
      
      if(StringUtils.containsNone(newPassword,"0123456789".toCharArray())){
        LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "validatePasswordRules",
                    "Password must contain least one number");
        result=false;
      }
      
      if(StringUtils.contains(newPassword,"Password")){
        LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "validatePasswordRules",
                    "Password cannot contain the word 'Password'");
        result=false;
      }     
      
      LOGGER.finest("Result= " + result);
      LOGGER.exiting(SOURCE_CLASS, "validatePasswordRules");
      
      return result;
    }
    
    
  public Boolean updateSysPrimaryEmail(String userName,String email){
    
     ViewObjectImpl sysUserView=this.getSysUsersView1();
     ViewObjectImpl personView=this.getHpPersonDView1();     
   
     VariableValueManager varManager = sysUserView.ensureVariableManager();
     varManager.setVariableValue("p_user_name", userName );
     sysUserView.executeQuery();
     Row sysRow = sysUserView.first();     

     /*VariableValueManager personVarManager = personView.ensureVariableManager();    
     personVarManager.setVariableValue("p_person_number",userName);
     personView.executeQuery();
     Row personRow = personView.first();*/
     
     //if(personRow!=null && sysRow!=null){
     if(sysRow!=null){
          LOGGER.finest("Found person row and sys row");
          sysRow.setAttribute("Email",email);
          //personRow.setAttribute("PayslipEmail",email);
          this.getDBTransaction().commit();
          LOGGER.finest("Update person payslipemail and sys email to "+email );
          return true;
     } 
     
     LOGGER.severe("Person row or Sys user row not found. Username "+userName+" .Email "+email);
    
     return false;
  }
   
    
}
