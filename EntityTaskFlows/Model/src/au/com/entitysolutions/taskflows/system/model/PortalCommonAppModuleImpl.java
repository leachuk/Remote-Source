package au.com.entitysolutions.taskflows.system.model;

import au.com.entitysolutions.taskflows.model.utils.EntityEmail;
import au.com.entitysolutions.taskflows.model.utils.ModelConstants;
import au.com.entitysolutions.taskflows.system.model.common.PortalCommonAppModule;

import java.io.File;

import java.sql.PreparedStatement;

import java.sql.SQLException;

import java.util.Hashtable;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import oracle.adf.share.ADFContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.Session;
import oracle.jbo.VariableValueManager;
import oracle.jbo.common.PropertyMetadata;
import oracle.jbo.domain.ClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import org.apache.commons.lang.StringUtils;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jul 04 10:59:16 EST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PortalCommonAppModuleImpl extends ApplicationModuleImpl implements PortalCommonAppModule {

    private static final String SOURCE_CLASS = PortalCommonAppModuleImpl.class.getCanonicalName();
    private static final Logger LOGGER = Logger.getLogger(SOURCE_CLASS);    
    
    /**
     * This is the default constructor (do not remove).
     */
    public PortalCommonAppModuleImpl() {
    }


    /**
     * Container's getter for SysUsersView1.
     * @return SysUsersView1
     */
    public ViewObjectImpl getSysUsersView1() {
        return (ViewObjectImpl)findViewObject("SysUsersView1");
    }

    /**
     * Container's getter for UserDetailsView.
     * @return UserDetailsView
     */
    public ViewObjectImpl getUserDetailsView() {
        return (ViewObjectImpl)findViewObject("UserDetailsView");
    }

    /**
     * Convenience method to get global variable value.
     * Uses the shared application module.
     * @param globalVariableName
     * @return
     */
    public String getGlobalVariable(String globalVariableName) {
        SharedAppModuleImpl appModule = (SharedAppModuleImpl)this.findOrCreateSharedApplicationModule("SharedAppModule", "au.com.entitysolutions.taskflows.system.model.SharedAppModule", SHARED_SCOPE_APPLICATION);
        return appModule.getGlobalVariable(globalVariableName);
    }
    
    /**
     * Send Email convenience method. Uses the SYS.MAIL_PKG
     * @param sender
     * @param recipient
     * @param subject
     * @param message
     */
    protected void sendEmail(String sender, String recipient, String subject, String message ) {
          LOGGER.entering(SOURCE_CLASS, "sendEmail");
          
          PreparedStatement st = null;
          StringBuffer execStmt =
              new StringBuffer("begin \n").append("SYS.mail_pkg.mail(sender => ?" +
                                                  "               , recipients => ?" +
                                                  "               , subject => ?" +
                                                  "               , message => ?);").append("end;");
          try {                                  
              
              st = getDBTransaction().createPreparedStatement(execStmt.toString()
                                                       ,DBTransaction.DEFAULT);
              st.setObject(1,sender);
              st.setObject(2,recipient);
              st.setObject(3,subject);
              st.setObject(4, message);
              st.execute();
          } catch (SQLException sqlE) {
              LOGGER.logp(Level.SEVERE, SOURCE_CLASS, "sendEmail",
                          "sendEmail Failed", sqlE);
              throw new JboException(sqlE);
          }
          finally {
            try
            {
              if(st != null) st.close();
            }
            catch(Exception e) {}
          }
          LOGGER.exiting(SOURCE_CLASS, "sendEmail");
      }        
    
    protected void auditUserAction(String actionType, String userName, String ipAddress) {
        this.auditUserAction(actionType, userName, ipAddress,null,null);
    }
    
    /**
     * Audit the user action
     * @param actionType
     * @param userName
     * @param ipAddress
     * @param actionContent
     * @param emailedTo
     */
    protected void auditUserAction(String actionType, String userName, String ipAddress,String actionContent, String emailedTo) {
        ViewObjectImpl actionView = this.getPortalUserActionView1();
        Row newRow = actionView.createRow();
        newRow.setNewRowState(Row.STATUS_NEW);
        newRow.setAttribute("ActionType", actionType);
        newRow.setAttribute("UserName", userName);
        newRow.setAttribute("IpAddress", ipAddress);
        if(actionContent != null)
        {
            newRow.setAttribute("ActionContent", new ClobDomain(actionContent));
        }        
        newRow.setAttribute("EmailedTo",emailedTo);
    }
    
    /**
     * Container's getter for PortalUserActionView1.
     * @return PortalUserActionView1
     */
    public ViewObjectImpl getPortalUserActionView1() {
        return (ViewObjectImpl)findViewObject("PortalUserActionView1");
    }

    @Override
    protected void prepareSession(Session session) {
        LOGGER.entering(SOURCE_CLASS, "prepareSession");
        super.prepareSession(session);        
        Map sess = ADFContext.getCurrent().getSessionScope();
        Number loggedInPersonId = (Number)sess.get(ModelConstants.LOGGED_IN_PERSON_ID_KEY);
        LOGGER.finest("PersonId: " + loggedInPersonId);
        if(loggedInPersonId == null || loggedInPersonId.isZero()) {
            //Find the current logged in person
            ViewObjectImpl impl = this.getUserDetailsView();
            VariableValueManager mgr =  impl.ensureVariableManager();
            LOGGER.finest("p_user_name: " + ADFContext.getCurrent().getSecurityContext().getUserName());
            mgr.setVariableValue("p_user_name", ADFContext.getCurrent().getSecurityContext().getUserName());
            impl.executeQuery();
            if(impl.hasNext()) {
                Row next = impl.next();
                Number personId = (Number)next.getAttribute("PersonId");
                LOGGER.finest("Set PersonId into session: " + personId);
                sess.put(ModelConstants.LOGGED_IN_PERSON_ID_KEY, personId);
            }           
        }
       LOGGER.exiting(SOURCE_CLASS, "prepareSession");
    }
    
    public void emailFileUploader(String attachmentPath,String fileDetails){     
      String userName =
          ADFContext.getCurrent().getSecurityContext().getUserName();      
      ViewObjectImpl userView=this.getUserDetailsView();
      VariableValueManager mgr = userView.ensureVariableManager();
      mgr.setVariableValue("p_user_name", userName);
      
      userView.executeQuery();
      Row userRow = userView.first();
      if (userRow != null) {
          String iproEmail=(String)userRow.getAttribute("Email");      
          String ecmsEmail=(String)userRow.getAttribute("EcmsConsContactEmail");
          String custEmail=(String)userRow.getAttribute("CustSupportContactEmail");
          String to=iproEmail;        
          
          String name=(String)userRow.getAttribute("FirstName") +", "+(String)userRow.getAttribute("Surname");
          
          String subject="Entity Online documents upload confirmation: "+name;
          String body="This email is confirmation that the attached documents have successfully been submitted via Entity Online.<br><br><b>Details:</b><br><br>";
          body+="Entity Online User Name: "+name+" <br><br>";
          body+="Entity Online User ID: "+userName;
          body+="<br><br><b>Uploaded Documents:</b><br><br>"+fileDetails;   
          body+="<br>Kind Regards, <br><br>The Entity Online Team";
          
          String msgId=sendEmailWithAttachments(to,null,custEmail+","+ecmsEmail,subject,body,attachmentPath);
        
          if(msgId!=null){
            File file=new File(attachmentPath);
            file.delete();
          }
          
        
      }
    }
    
    public String sendEmailWithAttachments(String to,String cc,String bcc,String subject,String body,String attachmentPath){
      EntityEmail email=new EntityEmail();
      email.addTo(to);      
      email.addCc(cc) ;     
      email.addBcc(bcc);
      email.setMsg(body);
      email.setSubject(subject);
      if(attachmentPath!=null){
        email.addAttachment(attachmentPath);
      }      
      return email.send();     
    }

  /**
   * Container's getter for HpPersonDView1.
   * @return HpPersonDView1
   */
  public ViewObjectImpl getHpPersonDView1() {
    return (ViewObjectImpl)findViewObject("HpPersonDView1");
  }


  /**
   * Container's getter for HpContactHistoryView1.
   * @return HpContactHistoryView1
   */
  public ViewObjectImpl getHpContactHistoryView1() {
    return (ViewObjectImpl)findViewObject("HpContactHistoryView1");
  }
}
