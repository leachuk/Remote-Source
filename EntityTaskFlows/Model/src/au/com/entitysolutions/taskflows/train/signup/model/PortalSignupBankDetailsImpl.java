package au.com.entitysolutions.taskflows.train.signup.model;

import au.com.entitysolutions.taskflows.model.CustomEntityImpl;

import java.math.BigDecimal;

import java.util.logging.Logger;
import java.util.regex.Pattern;

import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jul 25 14:13:29 EST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PortalSignupBankDetailsImpl extends CustomEntityImpl {
    private static EntityDefImpl mDefinitionObject;
    private static String SOURCE_CLASS = PortalSignupBankDetailsImpl.class.getCanonicalName();
    private static Logger LOGGER = Logger.getLogger(SOURCE_CLASS);

    /**
     * Validation method for Amount.
     */

/*    public boolean validateAmountDollar(String amount) {
        LOGGER.entering(SOURCE_CLASS,"validateAmountDollar");
        boolean isValid = true;
        if (amount != null) {
            Pattern compile = Pattern.compile("^\\d+(\\.\\d{1,2})?$");
            isValid = compile.matcher(amount).matches();
            LOGGER.finest("isValid:" + isValid);
        }
        LOGGER.exiting(SOURCE_CLASS,"validateAmountDollar");
        return isValid;
    }
*/
    /**
     * Validation method for Amount.
     */
/*    public boolean validateAmountPercentage(String amount) {
        LOGGER.entering(SOURCE_CLASS,"validateAmountPercentage");
        boolean isValid = true;
        if (amount != null) {
            Pattern compile = Pattern.compile("^\\d{1,2}");
            isValid = compile.matcher(amount).matches();
            LOGGER.finest("isValid:" + isValid);
        }        
        LOGGER.exiting(SOURCE_CLASS,"validateAmountPercentage");
        return true;
    }
*/
    
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        BankDetailsId {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getBankDetailsId();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setBankDetailsId((Number)value);
            }
        }
        ,
        UserTfId {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getUserTfId();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setUserTfId((Number)value);
            }
        }
        ,
        AmountUnit {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getAmountUnit();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setAmountUnit((String)value);
            }
        }
        ,
        Amount {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getAmount();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setAmount((String)value);
            }
        }
        ,
        BankName {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getBankName();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setBankName((String)value);
            }
        }
        ,
        Bsb {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getBsb();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setBsb((String)value);
            }
        }
        ,
        AccountNo {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getAccountNo();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setAccountNo((String)value);
            }
        }
        ,
        AccountName {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getAccountName();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setAccountName((String)value);
            }
        }
        ,
        Transformed {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getTransformed();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setTransformed((String)value);
            }
        }
        ,
        IsPrimary {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getIsPrimary();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setIsPrimary((String)value);
            }
        }
        ,
        CreatedBy {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setCreatedBy((Number)value);
            }
        }
        ,
        CreationDate {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getCreationDate();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setCreationDate((Date)value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setLastUpdatedBy((Number)value);
            }
        }
        ,
        LastUpdateDate {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getLastUpdateDate();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setLastUpdateDate((Date)value);
            }
        }
        ,
        Priority {
            public Object get(PortalSignupBankDetailsImpl obj) {
                return obj.getPriority();
            }

            public void put(PortalSignupBankDetailsImpl obj, Object value) {
                obj.setPriority((BigDecimal)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(PortalSignupBankDetailsImpl object);

        public abstract void put(PortalSignupBankDetailsImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() +
                AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int BANKDETAILSID = AttributesEnum.BankDetailsId.index();
    public static final int USERTFID = AttributesEnum.UserTfId.index();
    public static final int AMOUNTUNIT = AttributesEnum.AmountUnit.index();
    public static final int AMOUNT = AttributesEnum.Amount.index();
    public static final int BANKNAME = AttributesEnum.BankName.index();
    public static final int BSB = AttributesEnum.Bsb.index();
    public static final int ACCOUNTNO = AttributesEnum.AccountNo.index();
    public static final int ACCOUNTNAME = AttributesEnum.AccountName.index();
    public static final int TRANSFORMED = AttributesEnum.Transformed.index();
    public static final int ISPRIMARY = AttributesEnum.IsPrimary.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int PRIORITY = AttributesEnum.Priority.index();

    /**
     * This is the default constructor (do not remove).
     */
    public PortalSignupBankDetailsImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("au.com.entitysolutions.taskflows.train.signup.model.PortalSignupBankDetails");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for BankDetailsId, using the alias name BankDetailsId.
     * @return the BankDetailsId
     */
    public Number getBankDetailsId() {
        return (Number)getAttributeInternal(BANKDETAILSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BankDetailsId.
     * @param value value to set the BankDetailsId
     */
    public void setBankDetailsId(Number value) {
        setAttributeInternal(BANKDETAILSID, value);
    }

    /**
     * Gets the attribute value for UserTfId, using the alias name UserTfId.
     * @return the UserTfId
     */
    public Number getUserTfId() {
        return (Number)getAttributeInternal(USERTFID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UserTfId.
     * @param value value to set the UserTfId
     */
    public void setUserTfId(Number value) {
        setAttributeInternal(USERTFID, value);
    }

    /**
     * Gets the attribute value for AmountUnit, using the alias name AmountUnit.
     * @return the AmountUnit
     */
    public String getAmountUnit() {
        return (String)getAttributeInternal(AMOUNTUNIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for AmountUnit.
     * @param value value to set the AmountUnit
     */
    public void setAmountUnit(String value) {
        setAttributeInternal(AMOUNTUNIT, value);
    }

    /**
     * Gets the attribute value for Amount, using the alias name Amount.
     * @return the Amount
     */
    public String getAmount() {
        return (String)getAttributeInternal(AMOUNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for Amount.
     * @param value value to set the Amount
     */
    public void setAmount(String value) {
        setAttributeInternal(AMOUNT, value);
    }

    /**
     * Gets the attribute value for BankName, using the alias name BankName.
     * @return the BankName
     */
    public String getBankName() {
        return (String)getAttributeInternal(BANKNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for BankName.
     * @param value value to set the BankName
     */
    public void setBankName(String value) {
        setAttributeInternal(BANKNAME, value);
    }

    /**
     * Gets the attribute value for Bsb, using the alias name Bsb.
     * @return the Bsb
     */
    public String getBsb() {
        return (String)getAttributeInternal(BSB);
    }

    /**
     * Sets <code>value</code> as the attribute value for Bsb.
     * @param value value to set the Bsb
     */
    public void setBsb(String value) {
        setAttributeInternal(BSB, value);
    }

    /**
     * Gets the attribute value for AccountNo, using the alias name AccountNo.
     * @return the AccountNo
     */
    public String getAccountNo() {
        return (String)getAttributeInternal(ACCOUNTNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccountNo.
     * @param value value to set the AccountNo
     */
    public void setAccountNo(String value) {
        setAttributeInternal(ACCOUNTNO, value);
    }

    /**
     * Gets the attribute value for AccountName, using the alias name AccountName.
     * @return the AccountName
     */
    public String getAccountName() {
        return (String)getAttributeInternal(ACCOUNTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccountName.
     * @param value value to set the AccountName
     */
    public void setAccountName(String value) {
        setAttributeInternal(ACCOUNTNAME, value);
    }

    /**
     * Gets the attribute value for Transformed, using the alias name Transformed.
     * @return the Transformed
     */
    public String getTransformed() {
        return (String)getAttributeInternal(TRANSFORMED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Transformed.
     * @param value value to set the Transformed
     */
    public void setTransformed(String value) {
        setAttributeInternal(TRANSFORMED, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public Number getCreatedBy() {
        return (Number)getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(Number value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the CreationDate
     */
    public Date getCreationDate() {
        return (Date)getAttributeInternal(CREATIONDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreationDate.
     * @param value value to set the CreationDate
     */
    public void setCreationDate(Date value) {
        setAttributeInternal(CREATIONDATE, value);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the LastUpdatedBy
     */
    public Number getLastUpdatedBy() {
        return (Number)getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdatedBy.
     * @param value value to set the LastUpdatedBy
     */
    public void setLastUpdatedBy(Number value) {
        setAttributeInternal(LASTUPDATEDBY, value);
    }

    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date)getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LastUpdateDate.
     * @param value value to set the LastUpdateDate
     */
    public void setLastUpdateDate(Date value) {
        setAttributeInternal(LASTUPDATEDATE, value);
    }

    /**
     * Gets the attribute value for Priority, using the alias name Priority.
     * @return the Priority
     */
    public BigDecimal getPriority() {
        return (BigDecimal)getAttributeInternal(PRIORITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Priority.
     * @param value value to set the Priority
     */
    public void setPriority(BigDecimal value) {
        setAttributeInternal(PRIORITY, value);
    }

    /**
     * Gets the attribute value for IsPrimary, using the alias name IsPrimary.
     * @return the IsPrimary
     */
    public String getIsPrimary() {
        return (String)getAttributeInternal(ISPRIMARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for IsPrimary.
     * @param value value to set the IsPrimary
     */
    public void setIsPrimary(String value) {
        setAttributeInternal(ISPRIMARY, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param bankDetailsId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number bankDetailsId) {
        return new Key(new Object[]{bankDetailsId});
    }

    /**
     * Validation method for PortalSignupBankDetails.
     */
    public boolean validateMandatoryFields() {
        LOGGER.finest(this.getBankName());
        LOGGER.finest(this.getAccountName());
        LOGGER.finest(this.getAccountNo());
        LOGGER.finest(this.getBsb());
        LOGGER.finest(this.getAmount());
        LOGGER.finest(this.getAmountUnit());
        
        //Reset the Amount if AmountUnit is null - bit of a hack
        if (this.getAmountUnit() == null) { 
            this.setAmount(null);
        }
        
        boolean isValid =  (this.getBankName() == null && this.getAccountName() ==  null && this.getBsb() == null && 
             this.getAccountNo() ==  null && this.getAmount() ==  null &&
             this.getAmountUnit() ==  null) ||
            (this.getBankName() != null && this.getAccountName() != null && this.getBsb() != null && 
             this.getAccountNo() != null && this.getAmount() != null &&
             this.getAmountUnit() != null) ;
        return isValid;
    }


    /**
     * Validate percentage
     * @return
     */
    public boolean validatePercentage() {
        boolean isValid = true;
        String amount = this.getAmount();
        if (amount != null) {
            Pattern compile = Pattern.compile("^\\d{1,2}$");
            isValid = compile.matcher(amount).matches();
            isValid = isValid && (Integer.parseInt(amount) < 100);
        }
        return isValid;
    }

    /**
     * Validate dollar amount
     * @return
     */
    public boolean validateDollarAmount() {
        boolean isValid = true;
        String amount = this.getAmount();
        if (amount != null) {
            Pattern compile = Pattern.compile("^\\d+(\\.\\d{1,2})?$");
            isValid = compile.matcher(amount).matches();
        }
        return isValid;
    }
}
