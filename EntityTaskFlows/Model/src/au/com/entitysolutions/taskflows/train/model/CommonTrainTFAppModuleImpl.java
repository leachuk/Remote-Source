package au.com.entitysolutions.taskflows.train.model;


import au.com.entitysolutions.taskflows.model.utils.EntityEmail;
import au.com.entitysolutions.taskflows.model.utils.ModelConstants;
import au.com.entitysolutions.taskflows.system.model.PortalCommonAppModuleImpl;
import au.com.entitysolutions.taskflows.train.model.common.CommonTrainTFAppModule;

import java.sql.SQLException;

import java.util.logging.Logger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.VariableValueManager;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 01 09:56:08 EST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CommonTrainTFAppModuleImpl extends PortalCommonAppModuleImpl implements CommonTrainTFAppModule {
    private static String SOURCE_CLASS =
        CommonTrainTFAppModuleImpl.class.getCanonicalName();
    private static Logger LOGGER = Logger.getLogger(SOURCE_CLASS);

    /**
     * This is the default constructor (do not remove).
     */
    public CommonTrainTFAppModuleImpl() {
    }

    /**
     * Container's getter for PortalUserTFStepDownloadDocsView.
     * @return PortalUserTFStepDownloadDocsView
     */
    public ViewObjectImpl getPortalUserTFStepDownloadDocsView() {
        return (ViewObjectImpl)findViewObject("PortalUserTFStepDownloadDocsView");
    }

    /**
     * Container's getter for PortalUserTFStepUploadedDocsView.
     * @return PortalUserTFStepUploadedDocsView
     */
    public ViewObjectImpl getPortalUserTFStepUploadedDocsView() {
        return (ViewObjectImpl)findViewObject("PortalUserTFStepUploadedDocsView");
    }


    /**
     * Container's getter for PortalDocContentView.
     * @return PortalDocContentView
     */
    public ViewObjectImpl getPortalDocContentView() {
        return (ViewObjectImpl)findViewObject("PortalDocContentView");
    }

    /**
     * AppModule that cretes or updates the PortalDocContent record
     * @param userTFId
     * @param stepName
     * @param documentSubType
     * @param fileContent
     * @param fileMime
     * @param fileLength
     * @param fileName
     */
    public Number uploadDoc(String userTFId, String stepName, String docName,
                            BlobDomain fileContent, String fileMime,
                            String fileLength, String fileName) {
        LOGGER.entering(SOURCE_CLASS, "uploadDoc");      
        LOGGER.finest("Arguments: " + userTFId + "," + stepName + "," +
                      docName + "," + fileMime + "," + fileLength + "," +
                      fileName);  
        ViewObjectImpl userTFStepDoc = this.getPortalUserTFStepDocView();
        ViewObjectImpl docContentView = this.getPortalDocContentView();

        VariableValueManager mgr = userTFStepDoc.ensureVariableManager();
        mgr.setVariableValue("p_user_tf_id", userTFId);
        mgr.setVariableValue("p_step_name", stepName);
        mgr.setVariableValue("p_doc_type", "U");
        mgr.setVariableValue("p_doc_name", docName);
        userTFStepDoc.executeQuery();
        Row docContentRecord = null;
        Number docContentId = null;
        Row stepDoc = userTFStepDoc.first();
        if (stepDoc != null) {
            LOGGER.finest("Step Doc Found");
            docContentId = (Number)stepDoc.getAttribute("DocContentId");
            if (docContentId == null || docContentId.isZero()) {
                LOGGER.finest("Null DocContentId");
                docContentRecord = docContentView.createRow();
                docContentId =
                        (Number)docContentRecord.getAttribute("DocContentId");
            } else {
                LOGGER.finest("Existing DocContentRecord");
                //Existing row
                VariableValueManager docMgr =
                    docContentView.ensureVariableManager();
                docMgr.setVariableValue("p_doc_content_id",
                                        docContentId.toString());
                docContentView.executeQuery();
                docContentRecord = docContentView.first();
            }
            //Set up the PortalDocContent record
            docContentRecord.setAttribute("DocContentName", fileName);
            docContentRecord.setAttribute("DocContentMime", fileMime);
            Number byteSize = null;
            try {
                byteSize = new Number(fileLength);
            } catch (SQLException se) {
                se.printStackTrace();
            }
            docContentRecord.setAttribute("DocContentBytesize", byteSize);
            docContentRecord.setAttribute("DocContent", fileContent);

            //Set the docContentId into the StepRow
            stepDoc.setAttribute("DocContentId", docContentId);
        }
        LOGGER.exiting(SOURCE_CLASS, "uploadDoc");
        return docContentId;
    }

    /**
     * AppModule that cretes or updates the PortalDocContent record
     * @param userTFId
     * @param stepName
     * @param documentType
     */
    public Number removeDoc(String userTFId, String stepName, String docName) {
        LOGGER.entering(SOURCE_CLASS, "removeDoc");
        LOGGER.finest("Arguments: " + userTFId + "," + stepName + "," +
                      docName);
        ViewObjectImpl docContentView = this.getPortalDocContentView();

        ViewObjectImpl userTFStepDoc = this.getPortalUserTFStepDocView();
        VariableValueManager mgr = userTFStepDoc.ensureVariableManager();
        mgr.setVariableValue("p_user_tf_id", userTFId);
        mgr.setVariableValue("p_step_name", stepName);
        mgr.setVariableValue("p_doc_type", "U");
        if (docName != null) {
            mgr.setVariableValue("p_doc_name", docName);
        }        
        
        //userTFStepDoc.setFetchSize((short)-1);
        userTFStepDoc.executeQuery();
        userTFStepDoc.setRangeSize(-1);
        Row docContentRecord = null;

        
        Row rows[] = userTFStepDoc.getAllRowsInRange();
        if (rows != null) {
            for (int i = 0; i < rows.length; i++) {
                Row stepDoc = rows[i];
                Number docContentId = null;
                LOGGER.finest("Step Doc Found");
                docContentId = (Number)stepDoc.getAttribute("DocContentId");
                if (docContentId == null || docContentId.isZero()) {
                    LOGGER.finest("No DocContentId: do nothing");
                } else {
                    LOGGER.finest("Existing DocContentRecord");
                    //Existing row
                    stepDoc.setAttribute("DocContentId", null);
                    VariableValueManager docMgr =
                        docContentView.ensureVariableManager();
                    docMgr.setVariableValue("p_doc_content_id",
                                            docContentId.toString());
                    docContentView.executeQuery();
                    docContentRecord = docContentView.first();
                    docContentRecord.remove();
                }
                //Set up the PortalDocContent record
            }
            //Set the docContentId into the StepRow
        }
        LOGGER.exiting(SOURCE_CLASS, "removeDoc");
        return null;
    }

    /**
     * downloadDocument
     * @param userTFId
     * @param stepName
     * @param docName
     * @return doc content - BlobDomain
     * UNUSED AT THE MOMENT.
     */
    public BlobDomain downloadDoc(String userTFId, String stepName,
                                  String documentType,
                                  String docName) {
        LOGGER.entering(SOURCE_CLASS, "downloadDoc");
        BlobDomain blob = null;
        ViewObjectImpl docsView = null;
        if(documentType.equals("USER")) {
        }
        else {
            docsView = this.getPortalUserTFStepDownloadDocsView();           
        }
        
        VariableValueManager mgr = docsView.ensureVariableManager();
        mgr.setVariableValue("p_user_tf_id", userTFId);
        mgr.setVariableValue("p_step_name", stepName);
        mgr.setVariableValue("p_doc_name", stepName);
        
        docsView.executeQuery();
        docsView.setRangeSize(1);
        Row firstRow = docsView.first();
        if(firstRow != null) {
            blob = (BlobDomain)firstRow.getAttribute("DocContent");
        }
        else {
            LOGGER.severe("File not found");
            throw new JboException("Error downloading document");
        }
        LOGGER.exiting(SOURCE_CLASS, "downloadDoc");
        return blob;
    }

    /**
     * Method to perform actions at the end of a step
     * Includes the commit operation
     * @param userTFId
     * @param stepName
     */
    public void completeStep(String userTFId, String stepName) {
        LOGGER.entering(SOURCE_CLASS, "completeStep");
        ViewObjectImpl stepView = this.getPortalUserTFStepView();
        VariableValueManager mgr = stepView.ensureVariableManager();
        mgr.setVariableValue("p_user_tf_id", userTFId);
        mgr.setVariableValue("p_step_name", stepName);
        stepView.executeQuery();
        Row currRow = stepView.first();
        if (currRow != null) {
            LOGGER.finest("Mark complete");
            currRow.setAttribute("IsCompleted", "Y");
        } else {
            LOGGER.severe("No record found in PortalUserTFStep - p_user_tf_id:" +
                          userTFId + ", p_step_name:" + stepName);
            throw new JboException("Record not found for the step");
        }
        this.getDBTransaction().commit();
        LOGGER.entering(SOURCE_CLASS, "completeStep");
    }
    
    /**
     * Method to perform actions at the end of the taskflow
     * Includes the commit operation
     * @param userTFId
     * @param stepName
     */
    public void completeTaskFlow(String userTFId, String welcomeStepName, String reviewStepName) {
        LOGGER.entering(SOURCE_CLASS, "completeStep");                
        ViewObjectImpl tfView = this.getPortalUserTFView();
        VariableValueManager tfMgr = tfView.ensureVariableManager();
        tfMgr.setVariableValue("p_user_tf_id", userTFId);
        tfView.executeQuery();
        PortalUserTFViewRowImpl tfRow =(PortalUserTFViewRowImpl)tfView.first();
        if(tfRow != null) {
          
            //PORTAL 209
            Row tfBaseRow=tfRow.getPortalTfView();
            String tfName=(String)tfBaseRow.getAttribute("TfName");
            
            Number personId=(Number)tfRow.getAttribute("PersonId");
                        
            ViewObjectImpl historyView=this.getHpContactHistoryView1();
            Row submitConfirm=historyView.createRow();
            submitConfirm.setNewRowState(Row.STATUS_INITIALIZED);
            submitConfirm.setAttribute("PersonId",personId);
            submitConfirm.setAttribute("ContactType",ModelConstants.PORTAL_COMMUNICATION_TYPE);
            submitConfirm.setAttribute("ActivityType",ModelConstants.PORTAL_ACTIVITY_TYPE);
            submitConfirm.setAttribute("PersonId",personId);
            submitConfirm.setAttribute("ContactDate",new Date(Date.getCurrentDate()));
            submitConfirm.setAttribute("EntityEmployeeId",ModelConstants.PORTAL_LOGGED_IN_USER_ID);
            submitConfirm.setAttribute("Comments","IPro portal data has been submitted in task flow "+tfName+".");
            historyView.insertRow(submitConfirm);
            
            
            //Set the taskflow to "C"ompleted         
            LOGGER.finest("Mark Taskflow complete");
            tfRow.setAttribute("Status", ModelConstants.TRAIN_TASKFLOW_COMPLETE_STATUS);            
        }        
        this.completeStep(userTFId, welcomeStepName);
        this.completeStep(userTFId, reviewStepName);        
        LOGGER.entering(SOURCE_CLASS, "completeStep");
    }

    /**
     * Container's getter for PortalUserTFStepDocView.
     * @return PortalUserTFStepDocView
     */
    public ViewObjectImpl getPortalUserTFStepDocView() {
        return (ViewObjectImpl)findViewObject("PortalUserTFStepDocView");
    }

    /**
     * Container's getter for PortalUserTFStepView.
     * @return PortalUserTFStepView
     */
    public ViewObjectImpl getPortalUserTFStepView() {
        return (ViewObjectImpl)findViewObject("PortalUserTFStepView");
    }

    /**
     * Container's getter for PortalUserTFView.
     * @return PortalUserTFView
     */
    public ViewObjectImpl getPortalUserTFView() {
        return (ViewObjectImpl)findViewObject("PortalUserTFView");
    }

    /**
     * Container's getter for PortalUserTFStepSQLView.
     * @return PortalUserTFStepSQLView
     */
    public ViewObjectImpl getPortalUserTFStepSQLView() {
        return (ViewObjectImpl)findViewObject("PortalUserTFStepSQLView");
    }

    /**
     * Container's getter for PortalUserTFStepDocSQLView.
     * @return PortalUserTFStepDocSQLView
     */
    public ViewObjectImpl getPortalUserTFStepDocSQLView() {
        return (ViewObjectImpl)findViewObject("PortalUserTFStepDocSQLView");
    }


  /**
   * Container's getter for PortalTfView1.
   * @return PortalTfView1
   */
  public ViewObjectImpl getPortalTfView1() {
    return (ViewObjectImpl)findViewObject("PortalTfView1");
  }

  /**
   * Container's getter for PortalUserTfLink1.
   * @return PortalUserTfLink1
   */
  public ViewLinkImpl getPortalUserTfLink1() {
    return (ViewLinkImpl)findViewLink("PortalUserTfLink1");
  }
}
