package au.com.entitysolutions.taskflows.train.expense.model;

import au.com.entitysolutions.taskflows.model.utils.EntityZipAttachment;
import au.com.entitysolutions.taskflows.train.expense.model.common.ExpenseTrainAppModule;
import au.com.entitysolutions.taskflows.train.model.CommonTrainTFAppModuleImpl;

import au.com.entitysolutions.taskflows.train.signup.model.IProSignUpTrainAppModuleImpl;

import java.io.File;

import java.math.BigDecimal;

import java.text.SimpleDateFormat;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.VariableValueManager;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import org.apache.commons.lang.StringUtils;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Feb 23 09:41:54 EST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ExpenseTrainAppModuleImpl extends CommonTrainTFAppModuleImpl implements ExpenseTrainAppModule {
  /**
   * This is the default constructor (do not remove).
   */
   private static String SOURCE_CLASS =
       IProSignUpTrainAppModuleImpl.class.getCanonicalName();
  private static Logger LOGGER = Logger.getLogger(SOURCE_CLASS); 
  
  public ExpenseTrainAppModuleImpl() {
  }


  public void createEmptyExpense(){
    int rowSize=6;
    ViewObjectImpl vo=getPortalExpenseItemView2();    
    int count = vo.getRowCount();    
    vo.setRangeSize(rowSize);   
    for (int i =count; i <rowSize; i++) {       
        Row newRow = vo.createRow();       
        newRow.setNewRowState(Row.STATUS_INITIALIZED);        
        vo.insertRowAtRangeIndex(i,newRow);       
    }        
  }

  /**
   * Container's getter for PortalExpenseView1.
   * @return PortalExpenseView1
   */
  public ViewObjectImpl getPortalExpenseView1() {
    return (ViewObjectImpl)findViewObject("PortalExpenseView1");
  }


  /**
   * Container's getter for PortalExpenseItemView2.
   * @return PortalExpenseItemView2
   */
  public ViewObjectImpl getPortalExpenseItemView2() {
    return (ViewObjectImpl)findViewObject("PortalExpenseItemView2");
  }

  /**
   * Container's getter for PortalExpenseItemVL1.
   * @return PortalExpenseItemVL1
   */
  public ViewLinkImpl getPortalExpenseItemVL1() {
    return (ViewLinkImpl)findViewLink("PortalExpenseItemVL1");
  }

  /**
   * Container's getter for SysCommonLookupsView1.
   * @return SysCommonLookupsView1
   */
  public ViewObjectImpl getSysCommonLookupsView1() {
    return (ViewObjectImpl)findViewObject("SysCommonLookupsView1");
  }

  public void getExpenseItemDetails() {
      ViewObjectImpl voExpense=getPortalExpenseItemView2();
      ViewObjectImpl voLookup=getSysCommonLookupsView1();     
      voLookup.executeQuery();      
      Row rowLk=null;
      Row rowSys=null;      
      String codeLk=null;
      String code=null;
      Map<String,String[]> lookupMap=new HashMap<String,String[]>();
      String emailTo=null;     
      
      while((rowLk=voLookup.next())!=null){        
        String[] codeDetails=new String[2];
        codeDetails[0]=(String)rowLk.getAttribute("Meaning");
        codeDetails[1]=(String)rowLk.getAttribute("Description");
        codeLk=(String)rowLk.getAttribute("LookupCode");
        if(!StringUtils.isEmpty(codeLk)){
          lookupMap.put(codeLk,codeDetails);
        }       
        
      }
      
      Row secRows[] = voExpense.getAllRowsInRange();     
      Row row;
      
      for (int i = 0; i < secRows.length; i++){
        row = secRows[i];
        code=(String)row.getAttribute("ItemType");
        
        if(lookupMap.containsKey(code)){
          String[] details=lookupMap.get(code);
          row.setAttribute("ExpenseMeaning", details[0]);
          row.setAttribute("ExpenseUCMLink", details[1]);          
        }else{
          row.remove();
        }
      }   
  } 
  
  public void clearEmptyRows(){
    ViewObjectImpl voExpense=getPortalExpenseItemView2();
    Row secRows[] = voExpense.getAllRowsInRange();    
    
    if(secRows!=null){
      for(Row row: secRows){
        if(row!=null){
          String code=(String)row.getAttribute("ItemType");
          
          if(StringUtils.isEmpty(code)){
            row.remove();
          }          
        }
      }
    }
    
  }

  
  public boolean submitExpense(){
    
     String userName =
         ADFContext.getCurrent().getSecurityContext().getUserName();    
     ViewObjectImpl userView = this.getUserDetailsView();
     ViewObjectImpl voSysGlobal=getSysGlobalVariablesView1();
     VariableValueManager mgr = userView.ensureVariableManager();
     mgr.setVariableValue("p_user_name", userName);
     userView.executeQuery();
     voSysGlobal.executeQuery();
     Row userRow = userView.first();
     Row rowSys=voSysGlobal.first();
     String emailTo=null;
     if(rowSys!=null){
       emailTo=(String)rowSys.getAttribute("GlobalValue");
     }
     
     if (userRow != null) {
       ViewObjectImpl voExpense=getPortalExpenseItemView2(); 
       Row expenseRows[] = voExpense.getAllRowsInRange();   
       SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
       
       
       String firstName = (String)userRow.getAttribute("FirstName");
       String surname = (String)userRow.getAttribute("Surname");
       
       String customerSupportFullname=(String)userRow.getAttribute("CustSupportFullname");       
       String ecmsFullname=(String)userRow.getAttribute("EcmsConsFullname");
       
       String emailSubject=firstName+" "+surname+" - "+userName+" submitted Expense Claim via Entity Online";
       
       
       String body=emailSubject+" "+sdf.format(new Date())+" . Please view/validate the attached file(s) and process this claim within 3 days. <br><br>";
       body+="Customer Administrator : "+customerSupportFullname+" <br>";
       body+="IPro Manager : "+ecmsFullname+" <br><br>";
       
       EntityZipAttachment attachment=new EntityZipAttachment();
       
                            
       for(Row row: expenseRows){        
        
         String itemDesc=(String)row.getAttribute("ItemDescription");
         String meaning=(String)row.getAttribute("ExpenseMeaning");
         Number amount=(Number)row.getAttribute("Amount");
         Number percentUse=(Number)row.getAttribute("PercentUse");
         
         String docPath=(String)row.getAttribute("DocFilePath");
         String fullFilePath=StringUtils.replace(docPath,"\\","/");
         String[] fileUploadPath=fullFilePath.split("/");
         String realFileName=fileUploadPath[fileUploadPath.length-1];
         
         String formDocPath=(String)row.getAttribute("FormFilePath");
         String fullFormFilePath=StringUtils.replace(formDocPath,"\\","/");
         String[] fileFormUploadPath=fullFormFilePath.split("/");
         String realFormFileName=fileFormUploadPath[fileFormUploadPath.length-1];
         
         body+="<b>Item Type : "+meaning+"</b><br>";
         body+="Description : "+itemDesc+"<br>";
         body+="Amount : "+amount+"<br>";
         body+="Percent Business Use : "+percentUse+"<br>";
         body+="Proof of Payment uploaded : "+realFormFileName+"<br>";
         body+="Payment file Uploaded : "+realFileName+"<br>";
         
         if(fullFilePath!=null){
           attachment.addFileEntryRemove(realFileName,docPath);         
           attachment.addFileEntryRemove(realFormFileName,formDocPath);           
         }
         
         body+="<br><br>";
       }
       
       attachment.closeFile();       
       String messageId=sendEmailWithAttachments(emailTo,null,null,emailSubject,body,attachment.getFileName());       
        
       if(messageId !=null){         
         new File(attachment.getFileName()).delete();         
         return true;
       }        
     }    
     return false; 
   }


  /**
   * Container's getter for SysGlobalVariablesView1.
   * @return SysGlobalVariablesView1
   */
  public ViewObjectImpl getSysGlobalVariablesView1() {
    return (ViewObjectImpl)findViewObject("SysGlobalVariablesView1");
  } 

}
