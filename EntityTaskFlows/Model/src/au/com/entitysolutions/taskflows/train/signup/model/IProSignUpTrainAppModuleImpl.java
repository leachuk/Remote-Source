package au.com.entitysolutions.taskflows.train.signup.model;


import au.com.entitysolutions.taskflows.model.utils.ModelConstants;
import au.com.entitysolutions.taskflows.train.model.CommonTrainTFAppModuleImpl;

import au.com.entitysolutions.taskflows.train.signup.model.common.IProSignUpTrainAppModule;

import java.math.BigDecimal;

import java.sql.SQLException;

import java.text.SimpleDateFormat;

import java.util.Date;
import java.util.logging.Logger;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.VariableValueManager;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 26 14:44:49 EST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class IProSignUpTrainAppModuleImpl extends CommonTrainTFAppModuleImpl implements IProSignUpTrainAppModule {
    private static String SOURCE_CLASS =
        IProSignUpTrainAppModuleImpl.class.getCanonicalName();
    private static Logger LOGGER = Logger.getLogger(SOURCE_CLASS);

    /**
     * This is the default constructor (do not remove).
     */
    public IProSignUpTrainAppModuleImpl() {
    }

    /**
     * Container's getter for PortalSignupPersonalDetailsView.
     * @return PortalSignupPersonalDetailsView
     */
    public ViewObjectImpl getPortalSignupPersonalDetailsView() {
        return (ViewObjectImpl)findViewObject("PortalSignupPersonalDetailsView");
    }

    /**
     * Container's getter for PortalSignupBankDetailsView.
     * @return PortalSignupBankDetailsView
     */
    public ViewObjectImpl getPortalSignupPrimaryBankDetailsView() {
        return (ViewObjectImpl)findViewObject("PortalSignupPrimaryBankDetailsView");
    }

    /**
     * Container's getter for PortalSignupContactDetailsView.
     * @return PortalSignupContactDetailsView
     */
    public ViewObjectImpl getPortalSignupContactDetailsView() {
        return (ViewObjectImpl)findViewObject("PortalSignupContactDetailsView");
    }

    /**
     * Container's getter for PortalSignupEmerContactView.
     * @return PortalSignupEmerContactView
     */
    public ViewObjectImpl getPortalSignupEmerContactView() {
        return (ViewObjectImpl)findViewObject("PortalSignupEmerContactView");
    }


    /**
     * Container's getter for PortalSignupContractView.
     * @return PortalSignupContractView
     */
    public ViewObjectImpl getPortalSignupContractView() {
        return (ViewObjectImpl)findViewObject("PortalSignupContractView");
    }


    /**
     * Container's getter for PortalBankDetailsVL.
     * @return PortalBankDetailsVL
     */
    public ViewLinkImpl getPortalBankDetailsVL() {
        return (ViewLinkImpl)findViewLink("PortalBankDetailsVL");
    }

    /**
     * Container's getter for PortalContactDetailsVL.
     * @return PortalContactDetailsVL
     */
    public ViewLinkImpl getPortalContactDetailsVL() {
        return (ViewLinkImpl)findViewLink("PortalContactDetailsVL");
    }

    /**
     * Container's getter for PortalEmergencyContactVL.
     * @return PortalEmergencyContactVL
     */
    public ViewLinkImpl getPortalEmergencyContactVL() {
        return (ViewLinkImpl)findViewLink("PortalEmergencyContactVL");
    }

    /**
     * Container's getter for PortalContractDetailsVL.
     * @return PortalContractDetailsVL
     */
    public ViewLinkImpl getPortalContractDetailsVL() {
        return (ViewLinkImpl)findViewLink("PortalContractDetailsVL");
    }


    public Row createUserUploadForStep(String userTFId, String stepName,
                                       String docSubType) {
        Row docContentRow = null;

        return docContentRow;
    }


    /**
     * Create empty secondary bank records. User has the option to enter 3
     * different bank records.
     */
    public void createEmptySecondaryBankRecords() {
        LOGGER.entering(SOURCE_CLASS, "createEmptySecondaryBankRecords");

        LOGGER.finest("Primary Accounts found:" +
                      this.getPortalSignupPrimaryBankDetailsView().getRowCount());
        ViewObjectImpl secBankAcc =
            this.getPortalSignupSecondaryBankDetailsView();
        int count = secBankAcc.getRowCount();
        secBankAcc.setRangeSize(3);
        LOGGER.finest("Existing secondary bank records:" + count);
        //Require minimum 3 rows (including rows available in the database)
        for (int i = count; i < 3; i++) {
            LOGGER.finest("Creating empty row: " + i);
            Row newRow = secBankAcc.createRow();
            newRow.setAttribute("Priority",
                                new BigDecimal(i + 1)); //Priority 1 is the primary bank account
            newRow.setNewRowState(Row.STATUS_INITIALIZED);
            secBankAcc.insertRowAtRangeIndex(i, newRow);
        }
        LOGGER.exiting(SOURCE_CLASS, "createEmptySecondaryBankRecords");
    }

    /**
     * Reset priority on the primary account
     */
    public void resetPrimaryAccountPriority() {
        LOGGER.entering(SOURCE_CLASS, "resetPrimaryAccountPriority");
        ViewObjectImpl secBankAcc =
            this.getPortalSignupSecondaryBankDetailsView();
        LOGGER.finest("---->" + secBankAcc.getRowCountInRange());
        Row secRows[] = secBankAcc.getAllRowsInRange();
        Row secondaryRow = null;
        BigDecimal maxPriority = new BigDecimal(0);

        for (int i = 0; i < secRows.length; i++) {
            secondaryRow = secRows[i];
            if (secondaryRow != null) {
                LOGGER.finest("--->" +
                              (String)secondaryRow.getAttribute("BankName"));
                if (secondaryRow.getAttribute("BankName") != null) {
                    LOGGER.finest("Existing or New row found");
                    BigDecimal priority =
                        (BigDecimal)secondaryRow.getAttribute("Priority");
                    if (priority != null &&
                        priority.compareTo(maxPriority) > 0) {
                        LOGGER.finest("current row priority is higher:" +
                                      priority);
                        maxPriority = priority;
                    }
                } else {
                    LOGGER.finest("Remove an empty row");
                    secondaryRow.remove();
                }
            }
        }
        LOGGER.finest("Max Priority:" + maxPriority);
        ViewObjectImpl primaryBankAcc =
            this.getPortalSignupPrimaryBankDetailsView();
        Row primaryAccRow = primaryBankAcc.first();
        primaryAccRow.setAttribute("Priority",
                                   maxPriority.add(new BigDecimal(1)));
        LOGGER.exiting(SOURCE_CLASS, "resetPrimaryAccountPriority");
    }
    
    public void resetSuperFundType() {
        ViewObjectImpl superDetailsView =
            this.getPortalSignupSuperDetailsView();
        Row currentRow = superDetailsView.getCurrentRow();
        LOGGER.finest("Found super row:" + currentRow);
        if (currentRow != null) {
            currentRow.setAttribute("SuperFundSpin", null);
            currentRow.setAttribute("SuperMemberNumber", null);
            currentRow.setAttribute("SuperMemberName", null);
        }
    }

    /**
     * Reset the super details values based on current selections
     */
    public void resetSuperDetails() {
        LOGGER.entering(SOURCE_CLASS, "resetSuperDetails");
        ViewObjectImpl superDetailsView =
            this.getPortalSignupSuperDetailsView();
        Row currentRow = superDetailsView.getCurrentRow();
        LOGGER.finest("Found super row:" + currentRow);
        if (currentRow != null) {
            String superChoice =
                (String)currentRow.getAttribute("SuperChoice");
            String fundType = (String)currentRow.getAttribute("SuperFundType");
            
            LOGGER.finest("SuperChoice:" + superChoice);
            LOGGER.finest("FundType:" + fundType);
            if (!"OWN_CHOICE".equals(superChoice)) {
                //If not own choice set the fund type to null
                if (fundType != null) {
                    //Update only if needed
                    currentRow.setAttribute("SuperFundType", null);
                    fundType = null;
                }
                currentRow.setAttribute("SuperMemberName", null);
                currentRow.setAttribute("SuperMemberNumber", null);
                currentRow.setAttribute("SuperFundName", null);
            } 
            
            
            if (!"INDUSTRY_CORPORATE".equals(fundType)) {
                //if not INDUSTRY_CORPORATE set SPIN and MemberNumber to null
                currentRow.setAttribute("SuperFundSpin", null);
                
            }

            if (!"SELF_MANAGED".equals(fundType)) {
                //if not SELF_MANAGED set PaymentType to null
                currentRow.setAttribute("SuperPaymentType", null);
                currentRow.setAttribute("SuperFundAbn", null);
            }

            String paymentType =
                (String)currentRow.getAttribute("SuperPaymentType");

            if (!"EFT".equals(paymentType)) {
                //If not EFT set Account, BSB, Account Name and EMail to null
                currentRow.setAttribute("EftAccountName", null);
                currentRow.setAttribute("EftAccountNo", null);
                currentRow.setAttribute("EftBsb", null);
                currentRow.setAttribute("EftEmail", null);
            }

            if (!"BPAY".equals(paymentType)) {
                currentRow.setAttribute("BpayBillerCode", null);
                currentRow.setAttribute("BpayRefNo", null);
                currentRow.setAttribute("SacBpayBillerCode", null);
                currentRow.setAttribute("SacBpayRefNo", null);
            }

            if (!"CHEQUE".equals(paymentType)) {
                currentRow.setAttribute("ChqAddress", null);
                currentRow.setAttribute("ChqPayTo", null);
                currentRow.setAttribute("ChqPostcode", null);
                currentRow.setAttribute("ChqState", null);
                currentRow.setAttribute("ChqSuburb", null);
            }


        }
        LOGGER.exiting(SOURCE_CLASS, "resetSuperDetails");
    }

    /**
     * @override
     * @param userTFId
     * @param reviewStepName
     */
    public void completeTaskFlow(String userTFId, String welcomeStepName, String reviewStepName) {
        LOGGER.entering(SOURCE_CLASS, "completeTaskflow");
        String userName =
            ADFContext.getCurrent().getSecurityContext().getUserName();
        LOGGER.finest("p_user_name: " + userName);
        LOGGER.finest("Welcome Step Name: " + welcomeStepName);

        String noReplyEmail =
            this.getGlobalVariable(ModelConstants.PORTAL_NOTIFICATION_NOREPLY_SENDER_KEY);
        String taskflowCompleteEmail =
            this.getGlobalVariable(ModelConstants.PORTAL_IPRO_COMPLETE_TASKFLOW_EMAIL_TEMPLATE_KEY);

        String firstName = null;
        String surname = null;
        //Send email to the contacts
        ViewObjectImpl userView = this.getUserDetailsView();
        VariableValueManager mgr = userView.ensureVariableManager();
        mgr.setVariableValue("p_user_name", userName);
        userView.executeQuery();
        Row userRow = userView.first();
        if (userRow != null) {
            LOGGER.finest("Found user row:" + userRow.getAttribute("UserId"));
            firstName = (String)userRow.getAttribute("FirstName");
            surname = (String)userRow.getAttribute("Surname");

            String primaryContact =
                (String)userRow.getAttribute("PrimaryContact");
            String secondaryContact =
                (String)userRow.getAttribute("SecondaryContact");

            if (primaryContact == null && secondaryContact == null) {
                LOGGER.severe("No contacts found for user:" + userName);
                throw new JboException("The user does not have contacts assigned in the system.");
            }
            LOGGER.finest("Primary Contact: " + primaryContact +
                          ", Secondary Contact:" + secondaryContact);
            String primaryEmail = null;
            String secondaryEmail = null;
            if (ModelConstants.ipromgr.equals(primaryContact)) {
                primaryEmail =
                        (String)userRow.getAttribute("EcmsConsContactEmail");
            } else if (ModelConstants.custadm.equals(primaryContact)) {
                primaryEmail =
                        (String)userRow.getAttribute("CustSupportContactEmail");
            }

            if (ModelConstants.ipromgr.equals(secondaryContact)) {
                secondaryEmail =
                        (String)userRow.getAttribute("EcmsConsContactEmail");
            } else if (ModelConstants.custadm.equals(secondaryContact)) {
                secondaryEmail =
                        (String)userRow.getAttribute("CustSupportContactEmail");
            }

            String subject =
                "IPro data submitted via Portal - " + firstName + " " +
                surname;

            taskflowCompleteEmail =
                    taskflowCompleteEmail.replaceAll("\\$FIRST_NAME\\$",
                                                     firstName);
            taskflowCompleteEmail =
                    taskflowCompleteEmail.replaceAll("\\$SURNAME\\$", surname);
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            sdf.format(new Date());
            taskflowCompleteEmail =
                    taskflowCompleteEmail.replaceAll("\\$USER_ID\\$",
                                                     userName);
            taskflowCompleteEmail =
                    taskflowCompleteEmail.replaceAll("\\$SUBMIT_DATE\\$",
                                                     sdf.format(new Date()));

            LOGGER.finest("Primary Contact Email: " + primaryEmail +
                          ", Secondary Contact Email:" + secondaryEmail);
            LOGGER.finest("Email Content:" + taskflowCompleteEmail);
            if (primaryEmail != null) {
                this.sendEmail(noReplyEmail, primaryEmail, subject,
                               taskflowCompleteEmail);
            }

            if (secondaryEmail != null) {
                this.sendEmail(noReplyEmail, secondaryEmail, subject,
                               taskflowCompleteEmail);
            }
        } else {
            LOGGER.severe("User row not found!!! User Name: " + userName);
        }

        //Invoke complete taskflow on parent class
        super.completeTaskFlow(userTFId, welcomeStepName, reviewStepName);
        LOGGER.exiting(SOURCE_CLASS, "completeTaskflow");
    }


    /**
     * Container's getter for PortalSignupTaxDetailsView.
     * @return PortalSignupTaxDetailsView
     */
    public ViewObjectImpl getPortalSignupTaxDetailsView() {
        return (ViewObjectImpl)findViewObject("PortalSignupTaxDetailsView");
    }

    /**
     * Container's getter for PortalSignupTaxDetailsVL.
     * @return PortalSignupTaxDetailsVL
     */
    public ViewLinkImpl getPortalSignupTaxDetailsVL() {
        return (ViewLinkImpl)findViewLink("PortalSignupTaxDetailsVL");
    }

    /**
     * Container's getter for PortalSignupSecondaryBankDetailsView.
     * @return PortalSignupSecondaryBankDetailsView
     */
    public ViewObjectImpl getPortalSignupSecondaryBankDetailsView() {
        return (ViewObjectImpl)findViewObject("PortalSignupSecondaryBankDetailsView");
    }

    /**
     * Container's getter for PortalSecondaryBankDetailsVL.
     * @return PortalSecondaryBankDetailsVL
     */
    public ViewLinkImpl getPortalSecondaryBankDetailsVL() {
        return (ViewLinkImpl)findViewLink("PortalSecondaryBankDetailsVL");
    }

    /**
     * Container's getter for PortalSignupResidencyView.
     * @return PortalSignupResidencyView
     */
    public ViewObjectImpl getPortalSignupResidencyView() {
        return (ViewObjectImpl)findViewObject("PortalSignupResidencyView");
    }

    /**
     * Container's getter for PortalResidencyVL.
     * @return PortalResidencyVL
     */
    public ViewLinkImpl getPortalResidencyVL() {
        return (ViewLinkImpl)findViewLink("PortalResidencyVL");
    }

    /**
     * Container's getter for PortalSignupPoliciesView.
     * @return PortalSignupPoliciesView
     */
    public ViewObjectImpl getPortalSignupPoliciesView() {
        return (ViewObjectImpl)findViewObject("PortalSignupPoliciesView");
    }

    /**
     * Container's getter for PortalPoliciesVL.
     * @return PortalPoliciesVL
     */
    public ViewLinkImpl getPortalPoliciesVL() {
        return (ViewLinkImpl)findViewLink("PortalPoliciesVL");
    }

    /**
     * Container's getter for PortalSignupSuperDetailsView1.
     * @return PortalSignupSuperDetailsView1
     */
    public ViewObjectImpl getPortalSignupSuperDetailsView() {
        return (ViewObjectImpl)findViewObject("PortalSignupSuperDetailsView");
    }

    /**
     * Container's getter for PortalSuperDetailsVL1.
     * @return PortalSuperDetailsVL1
     */
    public ViewLinkImpl getPortalSuperDetailsVL() {
        return (ViewLinkImpl)findViewLink("PortalSuperDetailsVL");
    }
    
    public void setICContractLookup() {
        ViewObjectImpl view =  this.getPortalSignupContractView();
        Row firstRow = view.first();
        System.out.println("***************** " + firstRow.getAttribute("SendType"));
        firstRow.setAttribute("SendTypeLOV", "LOV_SendType_IC");
    }

    /**
     * Container's getter for PortalSignupBusinessInfoView.
     * @return PortalSignupBusinessInfoView
     */
    public ViewObjectImpl getPortalSignupBusinessInfoView() {
        return (ViewObjectImpl)findViewObject("PortalSignupBusinessInfoView");
    }

    /**
     * Container's getter for PortalBusinessInfoVL.
     * @return PortalBusinessInfoVL
     */
    public ViewLinkImpl getPortalBusinessInfoVL() {
        return (ViewLinkImpl)findViewLink("PortalBusinessInfoVL");
    }

    /**
     * Container's getter for PortalSignupIcCertificatesView.
     * @return PortalSignupIcCertificatesView
     */
    public ViewObjectImpl getPortalSignupIcCertificatesView() {
        return (ViewObjectImpl)findViewObject("PortalSignupIcCertificatesView");
    }

    /**
     * Container's getter for PortalICCertificatesVL.
     * @return PortalICCertificatesVL
     */
    public ViewLinkImpl getPortalICCertificatesVL() {
        return (ViewLinkImpl)findViewLink("PortalICCertificatesVL");
    }

  /**
   * Container's getter for PortalSignupContractExtView1.
   * @return PortalSignupContractExtView1
   */
  public ViewObjectImpl getPortalSignupContractExtView() {
    return (ViewObjectImpl)findViewObject("PortalSignupContractExtView");
  }
}
